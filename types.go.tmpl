{{define "types"}}

{{- $opts := .Opts -}}
{{- $types := .Types -}}

//
// Types
//
{{ if $types -}}
{{range $_, $type := $types -}}

{{if isEnumType $type -}}
{{$enumName := .Name}}
{{if $opts.exports}}export {{end}}var {{$enumName}};
(function ({{$enumName}}) {
{{- range $i, $field := .Fields}}
  {{$enumName}}["{{$field.Name}}"] = "{{$field.Name}}"
{{- end}}
})({{$enumName}} || ({{$enumName}} = {}))
{{end -}}

{{- if isStructType $type }}
{{if $opts.exports}}export {{end}}class {{.Name}} {
  constructor(_data) {
    this._data = {}
    if (_data) {
      {{range $type.Fields -}}
      this._data['{{template "fieldName" dict "Field" . }}'] = _data['{{template "fieldName" dict "Field" . }}']
      {{end}}
    }
  }
  {{ range $type.Fields -}}
  get {{template "fieldName" dict "Field" . }}() {
    return this._data['{{template "fieldName" dict "Field" .  }}']
  }
  set {{template "fieldName" dict "Field" . }}(value) {
    this._data['{{template "fieldName" dict "Field" . }}'] = value
  }
  {{end}}
  toJSON() {
    return this._data
  }
}
{{end -}}
{{end -}}
{{end -}}

{{end}}
