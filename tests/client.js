// Test v0.10.0 249dca96f024d73e0d3e7a762aa32065e228c5fa
// --
// Code generated by webrpc-gen@v0.10.0 with javascript generator. DO NOT EDIT.
//
// webrpc-gen -schema=./test.ridl -target=javascript -client -out=./client.js

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.10.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "249dca96f024d73e0d3e7a762aa32065e228c5fa"

//
// Types
//

export var Status;
(function (Status) {
  Status["AVAILABLE"] = "AVAILABLE"
  Status["NOT_AVAILABLE"] = "NOT_AVAILABLE"
})(Status || (Status = {}))

export class Simple {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['id'] = _data['id']
      this._data['name'] = _data['name']
      
    }
  }
  get id() {
    return this._data['id']
  }
  set id(value) {
    this._data['id'] = value
  }
  get name() {
    return this._data['name']
  }
  set name(value) {
    this._data['name'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class User {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['id'] = _data['id']
      this._data['USERNAME'] = _data['USERNAME']
      this._data['role'] = _data['role']
      
    }
  }
  get id() {
    return this._data['id']
  }
  set id(value) {
    this._data['id'] = value
  }
  get USERNAME() {
    return this._data['USERNAME']
  }
  set USERNAME(value) {
    this._data['USERNAME'] = value
  }
  get role() {
    return this._data['role']
  }
  set role(value) {
    this._data['role'] = value
  }
  
  toJSON() {
    return this._data
  }
}

export class Complex {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['meta'] = _data['meta']
      this._data['metaNestedExample'] = _data['metaNestedExample']
      this._data['namesList'] = _data['namesList']
      this._data['numsList'] = _data['numsList']
      this._data['doubleArray'] = _data['doubleArray']
      this._data['listOfMaps'] = _data['listOfMaps']
      this._data['listOfUsers'] = _data['listOfUsers']
      this._data['mapOfUsers'] = _data['mapOfUsers']
      this._data['user'] = _data['user']
      this._data['enum'] = _data['enum']
      
    }
  }
  get meta() {
    return this._data['meta']
  }
  set meta(value) {
    this._data['meta'] = value
  }
  get metaNestedExample() {
    return this._data['metaNestedExample']
  }
  set metaNestedExample(value) {
    this._data['metaNestedExample'] = value
  }
  get namesList() {
    return this._data['namesList']
  }
  set namesList(value) {
    this._data['namesList'] = value
  }
  get numsList() {
    return this._data['numsList']
  }
  set numsList(value) {
    this._data['numsList'] = value
  }
  get doubleArray() {
    return this._data['doubleArray']
  }
  set doubleArray(value) {
    this._data['doubleArray'] = value
  }
  get listOfMaps() {
    return this._data['listOfMaps']
  }
  set listOfMaps(value) {
    this._data['listOfMaps'] = value
  }
  get listOfUsers() {
    return this._data['listOfUsers']
  }
  set listOfUsers(value) {
    this._data['listOfUsers'] = value
  }
  get mapOfUsers() {
    return this._data['mapOfUsers']
  }
  set mapOfUsers(value) {
    this._data['mapOfUsers'] = value
  }
  get user() {
    return this._data['user']
  }
  set user(value) {
    this._data['user'] = value
  }
  get enum() {
    return this._data['enum']
  }
  set enum(value) {
    this._data['enum'] = value
  }
  
  toJSON() {
    return this._data
  }
}

  
//
// Client
//

export class TestApi {
  constructor(hostname, fetch) {
    this.path = '/rpc/TestApi/'
    this.hostname = hostname
    this.fetch = () => fetch
  }

  url(name) {
    return this.hostname + this.path + name
  }
  
  getEmpty = (headers) => {
    return this.fetch(
      this.url('GetEmpty'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        }
      })
    })
  }
  
  getError = (headers) => {
    return this.fetch(
      this.url('GetError'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        }
      })
    })
  }
  
  getOne = (headers) => {
    return this.fetch(
      this.url('GetOne'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          one: new Simple(_data.one)
        }
      })
    })
  }
  
  sendOne = (args, headers) => {
    return this.fetch(
      this.url('SendOne'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        }
      })
    })
  }
  
  getMulti = (headers) => {
    return this.fetch(
      this.url('GetMulti'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          one: new Simple(_data.one)
          , two: new Simple(_data.two)
          , three: new Simple(_data.three)
        }
      })
    })
  }
  
  sendMulti = (args, headers) => {
    return this.fetch(
      this.url('SendMulti'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        }
      })
    })
  }
  
  getComplex = (headers) => {
    return this.fetch(
      this.url('GetComplex'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          complex: new Complex(_data.complex)
        }
      })
    })
  }
  
  sendComplex = (args, headers) => {
    return this.fetch(
      this.url('SendComplex'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        }
      })
    })
  }
  
}

  
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res) => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status }
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}
